# Documents

> Ingest and manage your documents

R2R provides a powerful and flexible ingestion to process and manage various types of documents. It supports a wide range of file formatsâtext, documents, PDFs, images, audio, and even videoâand transforms them into searchable, analyzable content.

The ingestion process includes parsing, chunking, embedding, and optionally extracting entities and relationships for knowledge graph construction.

This documentation will guide you through:

* Ingesting files, raw text, or pre-processed chunks
* Choosing an ingestion mode (`fast`, `hi-res`, or `custom`)
* Updating and deleting documents and chunks

Refer to the [documents API and SDK reference](/api-and-sdks/documents/documents) for detailed examples for interacting with documents.

## Synchronous vs Asynchronous SDK

The R2R SDK offers both synchronous and asynchronous clients to suit different application needs. Both provide the same functionality with slightly different usage patterns.

<Tabs>
  <Tab title="Synchronous Client">
    The standard client for most applications. Operations block until completed, making your code sequential and easier to reason about.

    ```python
    from r2r import R2RClient

    client = R2RClient()
    # when using auth, do client.login(...)

    response = client.documents.create(
        file_path="document.pdf",
        metadata={"source": "research paper"},
        id=None
    )

    # Code here runs after document creation completes
    print(response)
    ```
  </Tab>

  <Tab title="Asynchronous Client">
    Ideal for high-throughput applications or when processing multiple files concurrently. Uses Python's async/await syntax.

    ```python
    from r2r import R2RAsyncClient

    async def process_documents():
        aclient = R2RAsyncClient()
        # when using auth, do await aclient.login(...)
        
        response = await aclient.documents.create(
            file_path="document.pdf",
            metadata={"source": "research paper"},
            id=None
        )
        
        # Other operations can run while waiting for document creation
        return response

    # Must be called from an async context
    # import asyncio
    # asyncio.run(process_documents())
    ```
  </Tab>
</Tabs>

### When to Use Each Client

* **Synchronous Client (`R2RClient`)**: Best for scripts, notebooks, and applications with simple workflows. Provides straightforward, sequential code execution.

* **Asynchronous Client (`R2RAsyncClient`)**: Recommended for:
  * Processing multiple documents simultaneously
  * Building responsive web applications
  * Integrating with other async frameworks or services
  * High-throughput document processing pipelines

Both clients support the same methods and parameters, differing only in execution model. The async client requires using `await` with all API calls and running in an async context.

## Ingesting Documents

A `Document` represents ingested content in R2R. When you ingest a file, text, or chunks:

1. The file (or text) is parsed into text.
2. Text is chunked into manageable units.
3. Embeddings are generated for semantic search.
4. Content is stored for retrieval and optionally linked to the knowledge graph.

Ingestion inside R2R is asynchronous. You can monitor ingestion status and confirm when documents are ready:

```zsh
client.documents.list()

```

```plaintext
[
  DocumentResponse(
    id=UUID('e43864f5-a36f-548e-aacd-6f8d48b30c7f'), 
    collection_ids=[UUID('122fdf6a-e116-546b-a8f6-e4cb2e2c0a09')], 
    owner_id=UUID('2acb499e-8428-543b-bd85-0d9098718220'), 
    document_type=<DocumentType.PDF: 'pdf'>, 
    metadata={'title': 'DeepSeek_R1.pdf', 'version': 'v0'}, 
    version='v0', 
    size_in_bytes=1768572, 
    ingestion_status=<IngestionStatus.SUCCESS: 'success'>, 
    extraction_status=<GraphExtractionStatus.PENDING: 'pending'>, 
    created_at=datetime.datetime(2025, 2, 8, 3, 31, 39, 126759, tzinfo=TzInfo(UTC)), 
    updated_at=datetime.datetime(2025, 2, 8, 3, 31, 39, 160114, tzinfo=TzInfo(UTC)), 
    ingestion_attempt_number=None, 
    summary="The document contains a comprehensive overview of DeepSeek-R1, a series of reasoning models developed by DeepSeek-AI, which includes DeepSeek-R1-Zero and DeepSeek-R1. DeepSeek-R1-Zero utilizes large-scale reinforcement learning (RL) without supervised fine-tuning, showcasing impressive reasoning capabilities but facing challenges like readability and language mixing. To enhance performance, DeepSeek-R1 incorporates multi-stage training and cold-start data, achieving results comparable to OpenAI's models on various reasoning tasks. The document details the models' training processes, evaluation results across multiple benchmarks, and the introduction of distilled models that maintain reasoning capabilities while being smaller and more efficient. It also discusses the limitations of current models, such as language mixing and sensitivity to prompts, and outlines future research directions to improve general capabilities and efficiency in software engineering tasks. The findings emphasize the potential of RL in developing reasoning abilities in large language models and the effectiveness of distillation techniques for smaller models.", summary_embedding=None, total_tokens=29673)] total_entries=1
  ), ...
]
```

An `ingestion_status` of `"success"` confirms the document is fully ingested. You can also check your R2R dashboard for ingestion progress and status.

### Supported File Types

R2R supports ingestion of the following document types:

| Category          | File types                                |
| ----------------- | ----------------------------------------- |
| Image             | `.bmp`, `.heic`, `.jpeg`, `.png`, `.tiff` |
| MP3               | `.mp3`                                    |
| PDF               | `.pdf`                                    |
| CSV               | `.csv`                                    |
| E-mail            | `.eml`, `.msg`, `.p7s`                    |
| EPUB              | `.epub`                                   |
| Excel             | `.xls`, `.xlsx`                           |
| HTML              | `.html`                                   |
| Markdown          | `.md`                                     |
| Org Mode          | `.org`                                    |
| Open Office       | `.odt`                                    |
| Plain text        | `.txt`                                    |
| PowerPoint        | `.ppt`, `.pptx`                           |
| reStructured Text | `.rst`                                    |
| Rich Text         | `.rtf`                                    |
| TSV               | `.tsv`                                    |
| Word              | `.doc`, `.docx`                           |
| XML               | `.xml`                                    |
| Code              | `.py`, `.js`, `.ts`, `.css`               |

For more details on creating documents, [refer to the create document API](/api-and-sdks/documents/create-document).

## Ingestion Modes

R2R offers three modes of ingestion to allow for maximal customization:

## Unprocessed files

<Tabs>
  <Tab title="fast">
    A speed-oriented ingestion mode that prioritizes rapid processing with minimal enrichment. Summaries and some advanced parsing are skipped, making this ideal for quickly processing large volumes of documents.

    ```python
      file_path = 'path/to/file.txt'

      # export R2R_API_KEY='sk-....'

      ingest_response = client.documents.create(
          file_path=file_path,
          ingestion_mode="fast" # fast mode for quick processing
      )
    ```
  </Tab>

  <Tab title="hi-res">
    A comprehensive, high-quality ingestion leverages multimodal foundation models (visual language models) for parsing complex documents and PDFs, even integrating image-based content.

    ```python
      file_path = 'path/to/file.txt'

      # hi-res mode for thorough extraction
      ingest_response = client.documents.create(
          file_path=file_path,
          ingestion_mode="hi-res",
          ingestion_config={ # custom chunking settings
              "chunking_strategy": "by_title",
              "new_after_n_chars": 256, # average chunk
              "max_characters": 512, # max chunk
              "combine_under_n_chars": 64, # chunk merge threshold
          }
      )
    ```
  </Tab>

  <Tab title="custom">
    For advanced users who require fine-grained control. In `custom` mode, you provide a full `ingestion_config` dict or object to specify every detail: parser options, chunking strategy, character limits, and more.

    ```python
      file_path = 'path/to/file.txt'

      # custom mode for full control
      ingest_response = client.documents.create(
          file_path=file_path,
          ingestion_mode="custom",
          ingestion_config={
              "strategy": "auto",
              "chunking_strategy": "by_title",
              "new_after_n_chars": 256, # average chunk
              "max_characters": 512, # max chunk
              "combine_under_n_chars": 64, # chunk merge threshold
              "overlap": 100,
          }
      )
    ```
  </Tab>
</Tabs>

## Pre-Processed Chunks

If you have pre-processed chunks from your own pipeline, you can directly ingest them. This is especially useful if you've already divided content into logical segments.

### Raw text

```python
raw_text = "This is my first document."
client.documents.create(
    raw_text=raw_text,
)
```

### Pre-Processed Chunks

```python
chunks = ["This is my first parsed chunk", "This is my second parsed chunk"]
client.documents.create(
    chunks=chunks,
)
```

## Deleting Documents and Chunks

To remove documents or chunks, call their respective `delete` methods:

```python
# Delete a document
client.documents.delete(document_id)

# Delete a chunk
client.chunks.delete(chunk_id)
```

You can also delete documents by specifying filters using the [`by-filter`](/api-and-sdks/documents/delete-document-by-filter) route.

## Conclusion

R2R's ingestion is flexible and efficient, allowing you to tailor ingestion to your needs:

* Use `fast` for quick processing.
* Use `hi-res` for high-quality, multimodal analysis.
* Use `custom` for advanced, granular control.

You can easily ingest documents or pre-processed chunks, update their content, and delete them when no longer needed. Combined with powerful retrieval and knowledge graph capabilities, R2R enables seamless integration of advanced document management into your applications.
